@page
@using System.Globalization
@model CreateModel
@{
    ViewData["Title"] = Localizer.Text("Create news");
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken;
    }
}

<h1>Create</h1>

<hr />
<div class="row">
    <div class="col-md-12">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="NewsViewModel.Title" class="control-label"></label>
                <input asp-for="NewsViewModel.Title" class="form-control" />
                <span asp-validation-for="NewsViewModel.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NewsViewModel.Description" class="control-label"></label>
                <textarea asp-for="NewsViewModel.Description" class="form-control"></textarea>
                <span asp-validation-for="NewsViewModel.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NewsViewModel.Content" class="control-label"></label>
                <textarea asp-for="NewsViewModel.Content" class="form-control"></textarea>
                <span asp-validation-for="NewsViewModel.Content" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NewsViewModel.CategoryTitle" class="control-label"></label>
                <div>
                    <select asp-for="NewsViewModel.CategoryId" asp-items="Model.Сategories" class="form-control">
                        <option>--none--</option>
                    </select>
                    <span asp-validation-for="NewsViewModel.CategoryId" class="text-danger"></span>
                </div>
            </div>

            <div style="margin:0 0 1.2em">
                <textarea asp-for="NewsViewModel.Tags"></textarea>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_TagEditorScriptsPartial");
    }

    @*easymde*@
    <link href="~/lib/easymde/css/easymde.min.css" rel="stylesheet" />
    <script src="~/lib/easymde/js/easymde.min.js"></script>

    @*inline-attachment*@
    <script src="~/lib/inline-attachment/dist/inline-attachment.min.js"></script>
    @*<script src="~/lib/inline-attachment/dist/jquery.inline-attachment.min.js"></script>

        <script type="text/javascript">$(function () {
                $('#NewsViewModel_Tags').inlineattachment({
                    uploadUrl: 'upload_attachment.php'
                });
            });</script>*@

    <script src="~/lib/inline-attachment/dist/codemirror-4.inline-attachment.min.js"></script>

    @*<script type="text/javascript">var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
            lineNumbers: true,
            matchBrackets: true,
            indentUnit: 4,
            indentWithTabs: true,
            enterMode: "keep",
            tabMode: "shift"
        });
        inlineAttachment.editors.codemirror3.attach(editor);</script>*@



    <script>
var easyMDE = new EasyMDE({ element: $('#NewsViewModel_Content')[0] });

        inlineAttachment.editors.codemirror4.attach(easyMDE.codemirror, {
            uploadUrl: 'Create?handler=File',
            uploadFieldName: 'uploadedFile',
            jsonFieldName: 'downloadUrl',
            extraHeaders: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            onFileUploadResponse: function (xhr) {
                var result = JSON.parse(xhr.responseText),
                    filename = result[this.settings.jsonFieldName];

                if (result && filename) {
                    var newValue;
                    if (typeof this.settings.urlText === 'function') {
                        newValue = this.settings.urlText.call(this, filename, result);
                    } else {
                        newValue = this.settings.urlText.replace(this.filenameTag, filename);
                    }
                    var text = this.editor.getValue().replace(this.lastValue, newValue);
                    this.editor.setValue(text);
                    this.settings.onFileUploaded.call(this, filename);
                }
                return false;
            }
        });</script>

}
